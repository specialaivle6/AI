"""
Î°úÍπÖ ÏÑ§Ï†ï Î∞è Ïú†Ìã∏Î¶¨Ìã∞
ÌôòÍ≤ΩÎ≥Ñ Î°úÍ∑∏ Î†àÎ≤®Í≥º Ìè¨Îß∑ÏùÑ Í¥ÄÎ¶¨
"""

import logging
import logging.handlers
import sys
from pathlib import Path
from typing import Optional
from datetime import datetime

from app.core.config import settings


def setup_logging(
    log_level: Optional[str] = None,
    log_file: Optional[str] = None
) -> None:
    """
    Î°úÍπÖ ÏãúÏä§ÌÖú Ï¥àÍ∏∞Ìôî

    Args:
        log_level: Î°úÍ∑∏ Î†àÎ≤® (Í∏∞Î≥∏Í∞í: settings.log_level)
        log_file: Î°úÍ∑∏ ÌååÏùº Í≤ΩÎ°ú (Í∏∞Î≥∏Í∞í: settings.log_file)
    """
    log_level = log_level or settings.log_level
    log_file = log_file or settings.log_file

    # Î°úÍ∑∏ ÎîîÎ†âÌÜ†Î¶¨ ÏÉùÏÑ±
    log_path = Path(log_file)
    log_path.parent.mkdir(parents=True, exist_ok=True)

    # Î°úÍ∑∏ Ìè¨Îß∑ ÏÑ§Ï†ï
    log_format = (
        "%(asctime)s | %(levelname)-8s | %(name)-20s | "
        "%(funcName)-15s:%(lineno)-3d | %(message)s"
    )

    # ÎÇ†Ïßú Ìè¨Îß∑
    date_format = "%Y-%m-%d %H:%M:%S"

    # Í∏∞Î≥∏ Î°úÍ±∞ ÏÑ§Ï†ï
    root_logger = logging.getLogger()
    root_logger.setLevel(getattr(logging, log_level.upper(), logging.INFO))

    # Í∏∞Ï°¥ Ìï∏Îì§Îü¨ Ï†úÍ±∞
    for handler in root_logger.handlers[:]:
        root_logger.removeHandler(handler)

    # ÏΩòÏÜî Ìï∏Îì§Îü¨
    console_handler = logging.StreamHandler(sys.stdout)
    console_handler.setLevel(getattr(logging, log_level.upper(), logging.INFO))
    console_formatter = logging.Formatter(log_format, date_format)
    console_handler.setFormatter(console_formatter)
    root_logger.addHandler(console_handler)

    # ÌååÏùº Ìï∏Îì§Îü¨ (Î°úÌÖåÏù¥ÏÖò)
    if not settings.debug:  # ÌîÑÎ°úÎçïÏÖò ÌôòÍ≤ΩÏóêÏÑúÎßå ÌååÏùº Î°úÍπÖ
        file_handler = logging.handlers.RotatingFileHandler(
            log_file,
            maxBytes=_parse_size(settings.log_max_size),
            backupCount=settings.log_backup_count,
            encoding='utf-8'
        )
        file_handler.setLevel(logging.INFO)
        file_formatter = logging.Formatter(log_format, date_format)
        file_handler.setFormatter(file_formatter)
        root_logger.addHandler(file_handler)

    # Ïô∏Î∂Ä ÎùºÏù¥Î∏åÎü¨Î¶¨ Î°úÍ∑∏ Î†àÎ≤® Ï°∞Ï†ï
    logging.getLogger("uvicorn").setLevel(logging.INFO)
    logging.getLogger("uvicorn.access").setLevel(logging.WARNING)
    logging.getLogger("httpx").setLevel(logging.WARNING)
    logging.getLogger("PIL").setLevel(logging.WARNING)
    logging.getLogger("matplotlib").setLevel(logging.WARNING)
    logging.getLogger("ultralytics").setLevel(logging.WARNING)


def _parse_size(size_str: str) -> int:
    """ÌÅ¨Í∏∞ Î¨∏ÏûêÏó¥ÏùÑ Î∞îÏù¥Ìä∏Î°ú Î≥ÄÌôò (Ïòà: '10MB' -> 10485760)"""
    size_str = size_str.upper()
    if size_str.endswith('KB'):
        return int(size_str[:-2]) * 1024
    elif size_str.endswith('MB'):
        return int(size_str[:-2]) * 1024 * 1024
    elif size_str.endswith('GB'):
        return int(size_str[:-2]) * 1024 * 1024 * 1024
    else:
        return int(size_str)


def get_logger(name: str) -> logging.Logger:
    """Ïù¥Î¶ÑÏùÑ ÏßÄÏ†ïÌïú Î°úÍ±∞ Î∞òÌôò"""
    return logging.getLogger(name)


class LoggerMixin:
    """Î°úÍ±∞Î•º Ï†úÍ≥µÌïòÎäî ÎØπÏä§Ïù∏ ÌÅ¥ÎûòÏä§"""

    @property
    def logger(self) -> logging.Logger:
        return logging.getLogger(self.__class__.__name__)


def log_performance(func_name: str, duration: float, **kwargs) -> None:
    """ÏÑ±Îä• Î°úÍπÖ Ìó¨Ìçº Ìï®Ïàò"""
    logger = get_logger("performance")

    details = " | ".join([f"{k}={v}" for k, v in kwargs.items()])
    logger.info(f"‚è±Ô∏è  {func_name} completed in {duration:.3f}s | {details}")


def log_api_request(
    method: str,
    path: str,
    user_id: Optional[str] = None,
    panel_id: Optional[int] = None,
    processing_time: Optional[float] = None
) -> None:
    """API ÏöîÏ≤≠ Î°úÍπÖ"""
    logger = get_logger("api")

    details = []
    if user_id:
        details.append(f"user_id={user_id}")
    if panel_id:
        details.append(f"panel_id={panel_id}")
    if processing_time:
        details.append(f"duration={processing_time:.3f}s")

    detail_str = " | " + " | ".join(details) if details else ""
    logger.info(f"üåê {method} {path}{detail_str}")


def log_model_status(model_name: str, status: str, **kwargs) -> None:
    """Î™®Îç∏ ÏÉÅÌÉú Î°úÍπÖ"""
    logger = get_logger("model")

    details = " | ".join([f"{k}={v}" for k, v in kwargs.items()])
    status_emoji = {
        "loading": "‚è≥",
        "loaded": "‚úÖ",
        "failed": "‚ùå",
        "unloading": "üîÑ"
    }.get(status, "‚ÑπÔ∏è")

    logger.info(f"{status_emoji} {model_name} {status} | {details}")


def log_analysis_result(
    analysis_type: str,
    success: bool,
    duration: float,
    **metadata
) -> None:
    """Î∂ÑÏÑù Í≤∞Í≥º Î°úÍπÖ"""
    logger = get_logger("analysis")

    status_emoji = "‚úÖ" if success else "‚ùå"
    status_text = "SUCCESS" if success else "FAILED"

    details = " | ".join([f"{k}={v}" for k, v in metadata.items()])
    logger.info(
        f"{status_emoji} {analysis_type} {status_text} | "
        f"duration={duration:.3f}s | {details}"
    )
